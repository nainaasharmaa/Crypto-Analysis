# -*- coding: utf-8 -*-
"""Untitled1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Qholi6DfoIsDNGmiCmxyf5Uzymdv5Rfd
"""

!pip install openpyxl

!pip install schedule

# to fetch data
import requests
import pandas as pd
import time
from openpyxl import load_workbook
import schedule

def fetch_crypto_data():
    url = "https://api.coingecko.com/api/v3/coins/markets"
    params = {
        "vs_currency": "usd",
        "order": "market_cap_desc",
        "per_page": 50,
        "page": 1,
        "sparkline": "false"
    }
    response = requests.get(url, params=params)
    data = response.json()

    crypto_data = []
    for coin in data:
        crypto_data.append([
            coin["name"],
            coin["symbol"].upper(),
            coin["current_price"],
            coin["market_cap"],
            coin["total_volume"],
            coin["price_change_percentage_24h"]
        ])

    columns = ["Cryptocurrency Name", "Symbol", "Current Price (USD)", "Market Cap", "24h Trading Volume", "24h Price Change (%)"]
    df = pd.DataFrame(crypto_data, columns=columns)

    return df

# lets analyze basic things
def analyze_data(df):
    top_5=df.head(5) #as already sorted by market capacity
    avg_price = df['Current Price (USD)'].mean()
    max_change = df.loc[df['24h Price Change (%)'].idxmax()]
    min_change = df.loc[df['24h Price Change (%)'].idxmin()]

    analysis = {
        "Top 5 Cryptocurrencies": top_5.to_dict(orient='records'),
        "Average Price":[avg_price],
        "Highest Change":[max_change.to_dict()],
        "Lowest Change":[min_change.to_dict()],
    }

    return analysis

# update with excel sheet
def update_excel():
    df = fetch_crypto_data()
    analysis = analyze_data(df)
    file_path = "crypto_data.xlsx"

    with pd.ExcelWriter(file_path, engine='openpyxl', mode='w') as writer:
        df.to_excel(writer, sheet_name="Live Data", index=False)

        analysis_df = pd.DataFrame.from_dict(analysis, orient='index')
        analysis_df.to_excel(writer, sheet_name="Analysis")

    print("Excel sheet updated.")

def schedule_updates(run_time=30):  # Run time in minutes
    schedule.every(5).minutes.do(update_excel)
    start_time = time.time()

    while True:
        if time.time() - start_time >= run_time * 60:
            print("Scheduled updates stopped after", run_time, "minutes.")
            break

        schedule.run_pending()
        time.sleep(1)

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

def analyze_excel(file_path):

    df = pd.read_excel(file_path, sheet_name="Live Data")

    # Display basic statistics
    print("Basic Statistics:")
    print(df.describe())

    # Check for missing values
    print("Missing Values:")
    print(df.isnull().sum())

    # Plot distribution of numerical columns
    num_cols = df.select_dtypes(include=["number"]).columns
    df[num_cols].hist(figsize=(10, 6), bins=20)
    plt.suptitle("Distribution of Numerical Features")
    plt.show()

    # Correlation heatmap - Selecting only numerical features for correlation
    plt.figure(figsize=(8,6))

    # Selecting numerical columns for correlation calculation
    numerical_df = df.select_dtypes(include=['number'])

    sns.heatmap(numerical_df.corr(), annot=True, cmap="coolwarm", fmt=".2f")
    plt.title("Feature Correlation Heatmap")
    plt.show()


if __name__ == "__main__":
    analyze_excel("crypto_data.xlsx")